import os
import click
import configparser
import fileinput
import cwltool.factory
import cwltool.context

@click.group()
def cli():
   pass

# Used for autocompletion
def get_services_list(ctx, args, incomplete):
    return ['virtuoso', 'graphdb', 'blazegraph', 'comunica',
    'browse-local-virtuoso', 'browse-local-graphdb', 'browse-local-blazegraph', 
    'drill', 'postgres']
def get_datasets_list(ctx, args, incomplete):
    return os.listdir("./datasets")
def get_workflows_list(ctx, args, incomplete):
    return os.listdir("./d2s-cwl-workflows/workflows")

@cli.command()
def init():
    """Initialize a project in the current directory"""
    config = configparser.ConfigParser()
    workspace = click.prompt(click.style('[?]', bold=True) + ' Enter the absolute path to the working directory (for file generated by the workflow). Default', default='/data/d2s-workspace')
    config['d2s'] = {'workspace': workspace}
    click.echo(click.style('[d2s]', bold=True) + ' Creating ' + workspace + ' - Your password might be required to set ownerships.')
    os.system('sudo mkdir -p ' + workspace + '/output/tmp-outdir')
    os.system('sudo chown -R ${USER} ' + workspace)

    d2s_repository_url = click.prompt(click.style('[?]', bold=True) + ' Enter the URL of the d2s git repository to clone in the current directory. Default', default='https://github.com/MaastrichtU-IDS/d2s-transform-template.git')
    config['d2s']['url'] = d2s_repository_url

    os.system('git clone --quiet --recursive ' + d2s_repository_url + ' .')
    click.echo(click.style('[d2s]', bold=True) + ' Git repository cloned.')
    if not os.path.exists('./d2s-cwl-workflows'):
        os.system('git submodule add --recursive https://github.com/MaastrichtU-IDS/d2s-cwl-workflows.git')

    # Replace /data/d2s-workspace volume in docker-compose.
    with fileinput.FileInput('d2s-cwl-workflows/docker-compose.yaml', inplace=True, backup='.bck') as file:
        for line in file:
            print(line.replace('/data/d2s-workspace', workspace), end='')

    # Copy load.sh in workspace for Virtuoso bulk load
    os.system('mkdir -p ' + workspace + '/virtuoso && cp d2s-cwl-workflows/support/virtuoso/load.sh ' + workspace + '/virtuoso')

    # click.secho('ATTENTION', blink=True, bold=True, nl=False, bg='blue')

    # Copy GraphDB zip file to the right folder in d2s-cwl-workflows
    click.echo(click.style('[d2s]', bold=True) + ' For the next step you should have ' 
        + click.style('downloaded GraphDB version 8.10.1 standalone zip', bold=True) 
        + ' distribution at ' 
        + click.style('https://ontotext.com/products/graphdb/', bold=True))
    graphdb_path = click.prompt(click.style('[?]', bold=True) + ' Enter the path to the GraphDB distribution 8.10.1 zip file used to build its image. Default', default='~/graphdb-free-8.10.1-dist.zip')
    os.system('cp ' + graphdb_path + ' ./d2s-cwl-workflows/support/graphdb')
    
    with open('.d2sconfig', 'w') as configfile:
        config.write(configfile)
    
    click.echo(click.style('[d2s]', bold=True) + ' Your d2s project has been created!')
    click.echo(click.style('[d2s]', bold=True) + ' The project configuration is stored in the ' 
        + click.style('.d2sconfig', bold=True) + ' file')
    click.echo(click.style('[d2s]', bold=True) + ' You can now run ' + click.style('d2s update', bold=True) 
        + ' to pull and build all images')


@cli.command()
def update():
    """Update d2s docker images"""
    os.system('docker-compose -f d2s-cwl-workflows/docker-compose.yaml pull')
    os.system('docker-compose -f d2s-cwl-workflows/docker-compose.yaml build graphdb')
    click.echo(click.style('[d2s]', bold=True) + ' All images pulled and built.')
    click.echo(click.style('[d2s]', bold=True) + ' You can now run ' 
        + click.style('d2s start virtuoso graphdb', bold=True) + ' to start virtuoso and graphdb triplestores.')


@cli.command()
def config():
    """Show d2s configuration"""
    click.echo()
    click.echo('Configuration is stored in the .d2sconfig file')
    click.echo()
    config = configparser.ConfigParser()
    config.read('.d2sconfig')
    # print(config['d2s']['workspace'])
    for section_name in config.sections():
        click.echo('[' + section_name + ']')
        # print('  Options:', config.options(section_name))
        for name, value in config.items(section_name):
            click.echo('  %s = %s' % (name, value))
    click.echo()


@cli.command()
@click.argument('services', nargs=-1, autocompletion=get_services_list)
def start(services):
    """Start services"""
    services_string = " ".join(services)
    print(services_string)
    os.system('docker-compose -f d2s-cwl-workflows/docker-compose.yaml up -d --force-recreate ' + services_string)
    click.echo('[ ' + services_string + ' started ]')
    if 'graphdb' in services:
        if click.confirm('Do you want to create the test repository in GraphDB?'):   
            os.system('curl -X POST http://localhost:7200/rest/repositories -F "config=@d2s-cwl-workflows/support/graphdb-test-repo-config.ttl" -H "Content-Type: multipart/form-data"')
            click.echo('Note: [ Empty reply from server ] means the repository test has been properly created')
    click.echo()
    click.echo('[ You can now run `d2s download drugbank` to download drugbank sample data to run a first workflow ]')


@cli.command()
@click.argument('services', nargs=-1, autocompletion=get_services_list)
@click.option(
    '--all/--no-all', default=False, 
    help='Stop all services')
def stop(services, all):
    """Stop services (--all to stop all services)"""
    if all:
        os.system('docker-compose -f d2s-cwl-workflows/docker-compose.yaml down')
        click.echo('[ All services stopped ]')
    else:
        services_string = " ".join(services)
        os.system('docker-compose -f d2s-cwl-workflows/docker-compose.yaml stop ' + services_string)
        click.echo('[ ' + services_string + ' stopped ]')


@cli.command()
def services():
    """List running services"""
    os.system('docker ps --format="table {{.Names}}\t{{.Ports}}\t{{.Status}}\t{{.Networks}}"')


@cli.command()
@click.argument('datasets', nargs=-1, autocompletion=get_datasets_list)
def download(datasets):
    """Download a dataset to be processed"""
    config = configparser.ConfigParser()
    config.read('.d2sconfig')
    workspace = config['d2s']['workspace']
    for dataset in datasets:
        os.system('docker run -it -v $(pwd):/srv \
            -v ' + workspace + ':/data \
            umids/d2s-bash-exec:latest \
            /srv/datasets/' + dataset + '/download/download.sh input/' + dataset)
        print('[ ' + dataset + ' downloaded ]')
    click.echo()
    click.echo('[ Datasets downloaded in ' + workspace + '/input/$dataset_id ]')
    click.echo('[ You can now run `d2s run workflow-xml.cwl drugbank` to run drugbank transformation workflow ]')

@cli.command()
@click.argument('workflow', autocompletion=get_workflows_list)
@click.argument('dataset', autocompletion=get_datasets_list)
@click.option(
    '--copy-mappings/--no-copy', default=False, 
    help='Copy the mappings generated by the workflow to our datasets folder')
def run(workflow, dataset, copy_mappings):
    """Run CWL workflows"""
    config = configparser.ConfigParser()
    config.read('.d2sconfig')
    workspace = config['d2s']['workspace']
    cwl_workflow_path = 'd2s-cwl-workflows/workflows/' + workflow
    dataset_config_path = 'datasets/' + dataset + '/config.yml'

    # Delete previous output
    os.system('rm -r ' + workspace + '/output')
    
    cwl_command = 'cwl-runner --custom-net d2s-cwl-workflows_network --outdir {0}/output --tmp-outdir-prefix={0}/output/tmp-outdir/ --tmpdir-prefix={0}/output/tmp-outdir/tmp- {1} {2}'.format(workspace,cwl_workflow_path,dataset_config_path)
    os.system(cwl_command)

    # Copy mappings generated by the workflow to datasets folder
    if (copy_mappings):
        os.system('cp ' + workspace + '/output/sparql_mapping_templates datasets/' 
        + dataset + '/mappings')
        click.echo()
        click.echo('[ Browse the generated mappings files in datasets/' + dataset + '/mappings ]')
    else:
        click.echo()
        click.echo('[ Browse the file generated by the workflow in ' + workspace + '/output/ ' + dataset + ' ]')
        click.echo('[ Access the linked data browser for Virtuoso at http://localhost:8891 ]')
        click.echo('[ Access Virtuoso (temp store) at http://localhost:8890 ]')
        click.echo('[ Access the linked data browser for GraphDB at http://localhost:7201 ]')
        click.echo('[ Access GraphDB at http://localhost:7200 ]')

    # Loading the datatset config.yml file don't work
    # dataset_config_file = open('datasets/' + dataset + '/config.yml', 'r')
    # # Define cwl-runner workspace
    # runtime_context = cwltool.context.RuntimeContext()
    # runtime_context.custom_net = 'd2s-cwl-workflows_network'
    # runtime_context.outdir = workspace + '/output'
    # runtime_context.tmp_outdir_prefix = workspace + '/output/tmp-outdir/'
    # runtime_context.tmpdir_prefix = workspace + '/output/tmp-outdir/tmp-'
    # cwl_factory = cwltool.factory.Factory(runtime_context=runtime_context)
    # # Run CWL workflow
    # run_workflow = cwl_factory.make(cwl_workflow_path) # the .cwl file
    # result = run_workflow(inp=dataset_config_file.read())  # the config yaml
    # print('Running!')
    # print(result)


@cli.group()
def generate():
    """Generate new datasets, workflows, tools"""
    pass

@generate.command()
def dataset():
    """Create a new dataset from template in datasets folder"""
    # config = configparser.ConfigParser()
    # TODO: make it an array of obj
    dataset_id = click.prompt('Enter the identifier of your datasets, e.g. wikipathways (lowercase, no space or weird characters)')
    dataset_name = click.prompt('Enter a human-readable name for your datasets, e.g. WikiPathways')
    dataset_description = click.prompt('Enter a description for this dataset')
    publisher_name = click.prompt('Enter complete name for the institutions publishing the data and its affiliation, e.g. Institute of Data Science at Maastricht University')
    publisher_url = click.prompt('Enter a valid URL for the publisher homepage')
    source_license = click.prompt('Enter a valid URL to the license informations about the original dataset, e.g. http://creativecommons.org/licenses/by-nc/4.0/legalcode')
    rdf_license = click.prompt('Enter a valid URL to the license informations about the RDF distribution of the dataset')

    dataset_folder_path = 'datasets/' + dataset_id
    os.system('cp -r d2s-cwl-workflows/support/template/dataset ' + dataset_folder_path)
    
    for dname, dirs, files in os.walk(dataset_folder_path):
        for fname in files:
            fpath = os.path.join(dname, fname)
            with open(fpath) as f:
                file_content = f.read()
            file_content = file_content.replace("$dataset_id", dataset_id).replace("$dataset_name", dataset_name).replace("$dataset_description", dataset_description)
            file_content = file_content.replace("$publisher_name", publisher_name).replace("$publisher_url", publisher_url)
            file_content = file_content.replace("$source_license", source_license).replace("$rdf_license", rdf_license)
            with open(fpath, "w") as f:
                f.write(file_content)

# @generate.command()
# @click.argument('dataset', autocompletion=get_datasets_list)
# def mappings(dataset):
#     """Generate mappings for the given dataset"""
    